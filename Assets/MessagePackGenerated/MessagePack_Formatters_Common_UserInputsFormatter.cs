// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Common
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class UserInputsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Common.UserInputs>
    {


        public void Serialize(ref MessagePackWriter writer, global::Common.UserInputs value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.Index);
            writer.Write(value.TickId);
            writer.Write(value.UserId);
            formatterResolver.GetFormatterWithVerify<byte[][]>().Serialize(ref writer, value.InputData, options);
        }

        public global::Common.UserInputs Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Index__ = default(int);
            var __TickId__ = default(int);
            var __UserId__ = default(int);
            var __InputData__ = default(byte[][]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Index__ = reader.ReadInt32();
                        break;
                    case 1:
                        __TickId__ = reader.ReadInt32();
                        break;
                    case 2:
                        __UserId__ = reader.ReadInt32();
                        break;
                    case 3:
                        __InputData__ = formatterResolver.GetFormatterWithVerify<byte[][]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Common.UserInputs();
            ____result.Index = __Index__;
            ____result.TickId = __TickId__;
            ____result.UserId = __UserId__;
            ____result.InputData = __InputData__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
